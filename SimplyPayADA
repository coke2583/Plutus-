{-# LANGUAGE NoImplicitPrelude #-}
{-# LANGUAGE TemplateHaskell #-}
{-# OPTIONS_GHC -fno-warn-missing-signatures #-}

module OffChain.PayToWallet where
import Language.PlutusTx.Prelude
import Ledger
import Ledger.Ada
import Playground.Contract
import Playground.Contract (mkFunctions, printSchemas)
import Wallet
import Wallet.Emulator.Types (walletPubKey)
import Control.Monad (void)
import Data.Maybe (maybeToList)

myPayToWallet :: MonadWallet m => Wallet -> Ada -> m ()
myPayToWallet wallet ada = do
  let pubKey = walletPubKey wallet
  let val = toValue ada
  let o = pubKeyTxOut val pubKey
  (ins, mo) <- createPaymentWithChange val
  void $ createTxAndSubmit
        defaultSlotRange
        ins
        (o : maybeToList mo)
  
  
$(mkFunctions ['myPayToWallet])
