module Game.Guess where

import Language.PlutusTx
import Language.PlutusTx.Builtins (equalsByteString)
import Language.PlutusTx.Prelude
import Ledger 
import Ledger.Ada
import Playground.Contract
import Wallet

import Data.ByteString.Lazy.Char8 (pack)

newtype HashedText = HashedText ByteString
newtype ClearText = ClearText ByteString

makeLift ''HashedText
makeLift ''ClearText

mkDataScript :: String -> DataScript
mkDataScript secret = 
    let hashedText = HashedText $ sha2_256 $ pack secret
    in DataScript $ lifted hashedText
    
mkRedeemerScript :: String -> RedeemerScript
mkRedeemerScript clear = 
    let clearText = ClearText $ pack clear
    in RedeemerScript $ lifted clearText 
    
type GameValidator = HashedText -> ClearText -> PendingTx -> Bool

validate :: GameValidator
validate (HashedText hashed) (ClearText clear) _ = equalsByteString hashed (sha2_256 clear)

gameValidator :: ValidatorScript
gameValidator = ValidatorScript $$(compileScript [|| validate ||])

gameAddress :: Address 
gameAddress = scriptAddress gameValidator

startGame :: MonadWallet m => m()
startGame = startWatching gameAddress

lock :: MonadWallet m => String -> Ada -> m()
lock secret ada = payToScript_
    defaultSlotRange
    gameAddress
    (toValue ada)
    (mkDataScript secret)
    
guess :: MonadWallet m => String -> m()
guess word = collectFromScript
    defaultSlotRange
    gameValidator
    (mkRedeemerScript word)
    
$(mkFunctions ['startGame, 'lock, 'guess])
