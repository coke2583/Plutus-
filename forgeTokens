
module Token.Fungible where

import           Language.PlutusTx 
import           Language.PlutusTx.Prelude
import           Ledger

import qualified Ledger.Ada                 as A
import qualified Ledger.Value               as V
import           Playground.Contract
import           Wallet
import           Playground.Contract (mkFunctions, printSchemas)
import           Control.Monad              (void)
import qualified Data.ByteString.Lazy.Char8 as C
import qualified Data.Map                   as Map
import qualified Data.Set                   as Set
import qualified Data.Text                  as T

data Fungible = Fungible
    { name   :: TokenName -- (1) The name of our currency (for example "Plutus").
    , issuer :: PubKey    -- (2) The person who is allowed to forge this currency
    } deriving (Show, Generic, ToJSON, FromJSON, ToSchema)

makeLift ''Fungible

type FungibleValidator = () -> Integer -> PendingTx -> Bool

-- The policy will never change, so for its data scripts, we can use the unit type ().

-- A PendingTx value:
-- ◦ Contains information about the current transaction
--      ▪ inputs and outputs
--      ▪ validity interval, etc.
-- ◦ Also contains information about the ledger state, which is provided by the specific node
-- doing the transaction validation
-- A `PendingTx` contains the hashes of redeemer and data scripts of all of its inputs and outputs.

-- We are now ready to write down the validation logic, i.e. the monetary policy of our currency:
validateFungible :: Fungible -> FungibleValidator
validateFungible f () n tx =                -- f = fungible, () = datascript, n = integer, tx=pendingTx
    case pendingTxOutputs tx of             -- PendingTxOut Get the list of 'PendingTxOut' outputs of the pending transaction at a given script address
                                            -- Why is this here?
                                            -- To validate a transaction, we have to evaluate the validation script of each of
                                            -- the transaction's inputs. The validation script sees the data of the
                                            -- transaction output it validates, and the redeemer of the transaction input of
                                            -- the transaction that consumes it.
                                            -- In addition, the validation script also needs information on the transaction as
                                            -- a whole (not just the output-input pair it is concerned with). This information
                                            -- is provided by the `PendingTx` type. A `PendingTx` contains the hashes of
                                            -- redeemer and data scripts of all of its inputs and outputs.
        [o] -> case pendingTxOutData o of   -- This has 2 datatypes nested within it, DataTxOut + PubKeyTxOut
            DataTxOut -> False              -- The data script of the pending transaction output 
            PubKeyTxOut key ->              -- Pub key address
                   key == issuer f          -- (1) The newly forged money must go to the currency issuer
                && txSignedBy tx (issuer f) -- (2) The forging transaction must be signed by the currency issuer
                && pendingTxOutValue o == v -- (3) The forged value must be the value indicated by the redeemer script.
        _   -> False                        -- (4) We expect exactly one output.
  where
    v :: Value                              -- (5) The value corresponding to the redeemer script.
    v = V.singleton
            (ownCurrencySymbol tx)          -- (6) Similar to function ownHash, function ownCurrencySymbol gives us the CurrencySymbol that we are currently validating.
            (name f)
            n

-- {- Note [Script types in pending transactions]
-- To validate a transaction, we have to evaluate the validation script of each of
-- the transaction's inputs. The validation script sees the data of the
-- transaction output it validates, and the redeemer of the transaction input of
-- the transaction that consumes it.
-- In addition, the validation script also needs information on the transaction as
-- a whole (not just the output-input pair it is concerned with). This information
-- is provided by the `PendingTx` type. A `PendingTx` contains the hashes of
-- redeemer and data scripts of all of its inputs and outputs.
--}

fungibleDataScript :: DataScript
fungibleDataScript = DataScript $ lifted () --$ because it takes an argument(s)

mkFungibleRedeemerValue :: Integer -> RedeemerScript
mkFungibleRedeemerValue = RedeemerScript . lifted -- . because it's a single argument

mkFungibleValidator :: Fungible -> ValidatorScript
mkFungibleValidator = ValidatorScript
  . applyScript $$(compileScript [|| validateFungible ||])
  . lifted

fungibleAddress :: Fungible -> Address
fungibleAddress = scriptAddress . mkFungibleValidator

fungibleSymbol :: Fungible -> CurrencySymbol
fungibleSymbol f = case validatorScriptHash $ mkFungibleValidator f of
  ValidatorHash h -> V.currencySymbol h

fungibleValue :: Fungible -> Integer -> Value
fungibleValue f = V.singleton (fungibleSymbol f) (name f)

forge :: forall m. MonadWallet m
      => String  -- token name
      -> Integer -- quantity to forge
      -> m ()
forge n s = do
    key <- ownPubKey
    let f = Fungible
            { name   = TokenName $ C.pack n
            , issuer = key                                           -- (1)
            }
    logMsg $ T.pack $
        "forging " ++ show s ++ " of " ++ show f                     -- forging 5 of Fungible
    startWatching $ fungibleAddress f                                -- (2) We need to watch the "monetary policy"-address of our currency in order to be able to detect when the first transaction has been accepted onto the blockchain. 

    void $ createTxAndSubmit                                          -- (3) The signature of createTxAndSubmit is WalletAPI m ⇒ SlotRange → Set.Set TxIn → [TxOut] → m Tx
        defaultSlotRange
        Set.empty                                                     -- a set of inputs = we dont have any
        [ scriptTxOut                                                 -- scriptTxOut :: Value -> ValidatorScript -> DataScript -> TxOut
            zero                                                      -- The first transaction has no inputs and zero value. All we need is a script output at the "monetary policy"-address
            (mkFungibleValidator f)
            fungibleDataScript
        ]

    go f                                                               -- Describes the condition to be true to go ahead with the forge, and then what to do to proceed with forge.

  where
    go :: Fungible -> m ()
    go f = do
        t <- trigger
        registerOnce t $ handler f                                  -- registerOnce registers a trigger

    trigger :: m EventTrigger                                       -- The event trigger defines a condition
    trigger = do
        sl <- slot
        return $ slotRangeT $ intervalFrom $ sl + 1                  -- (4) Condition here is that we simply wait for one slot.

    handler :: Fungible -> EventHandler m                            -- the event handler describes what to do once the condition becomes true.
    handler f = EventHandler $ const $ do
        outs <- outputsAt $ fungibleAddress f
        case Map.keys outs of
            (ref : _) -> do                                          -- (5) The UTXO we need as input is on the blockchain.
                let v = fungibleValue f s
                signTxAndSubmit_ Tx
                    { txInputs     = Set.singleton $ scriptTxIn      -- (6)  We use the UTXO created in the first step as input for the forging transaction
                                        ref
                                        (mkFungibleValidator f)
                                        (mkFungibleRedeemerValue s)
                    , txOutputs    = [pubKeyTxOut v $ issuer f]      -- (7)  The forged value goes to the wallet owner.
                    , txFee        = zero
                    , txForge      = v                               -- (8) Here we actually forge. 
                    , txValidRange = defaultSlotRange
                    , txSignatures = Map.empty
                    --- , txData = Map.singleton (dataValueHash unitData) unitData
                    }
            _         -> go f                                         -- (9) If the transaction from the first step is not yet on the blockchain, we keep waiting.
            
            
data Trade = Trade
    { value1   :: Value  -- What the seller wants to trade.
    , party1   :: PubKey -- The seller.
    , value2   :: Value  -- What the buyer wants to pay.
    , party2   :: PubKey -- The buyer.
    , deadline :: Slot   -- The trade has to be done before this.
    } deriving (Show, Generic, ToJSON, FromJSON, ToSchema)

makeLift ''Trade
data TradeAction = Execute | Reclaim
    deriving Show

makeLift ''TradeAction

type TradeValidator = () -> TradeAction -> PendingTx -> Bool

validateTrade :: Trade -> TradeValidator
validateTrade t () Execute tx = case pendingTxOutputs tx of        -- (1)
    [o1, o2] -> case (pendingTxOutData o1, pendingTxOutData o2) of -- (2)
        (PubKeyTxOut key1, PubKeyTxOut key2) ->                    -- (3)
               intervalTo (deadline t)                             -- (4)
                    `contains` pendingTxValidRange tx
            && key1 == party1 t                                    -- (5)
            && key2 == party2 t                                    -- (6)
            && pendingTxOutValue o1 == value2 t                    -- (7)
            && pendingTxOutValue o2 == value1 t                    -- (8)
        _                                    -> False
    _        -> False
validateTrade t () Reclaim tx = case pendingTxOutputs tx of
    [o] -> case pendingTxOutData o of
        PubKeyTxOut key ->
               intervalFrom (deadline t)
                    `contains` pendingTxValidRange tx
            && (   (   key == party1 t
                    && pendingTxOutValue o == value1 t)
                || (   key == party2 t
                    && pendingTxOutValue o == value2 t))
        _               -> False
    _   -> False

mkTradeValidator :: Trade -> ValidatorScript
mkTradeValidator =
      ValidatorScript
    . applyScript $$(compileScript [|| validateTrade ||])
    . lifted

tradeDataScript :: DataScript
tradeDataScript = DataScript $ lifted ()

mkTradeRedeemerValue :: TradeAction -> RedeemerScript
mkTradeRedeemerValue = RedeemerScript . lifted

tradeAddress :: Trade -> Address
tradeAddress = scriptAddress . mkTradeValidator 

sell :: forall m. MonadWallet m
     => PubKey  -- currency issuer
     -> String  -- currency name
     -> Integer -- currency quantity
     -> Value   -- price
     -> PubKey  -- buyer
     -> Slot    -- deadline
     -> m ()
sell i c n v2 p2 dl = do
    let f  = Fungible
                { issuer = i
                , name   = TokenName $ C.pack c
                }
        v1 = fungibleValue f n
    p1 <- ownPubKey
    let t = Trade
                { value1   = v1
                , party1   = p1
                , value2   = v2
                , party2   = p2
                , deadline = dl
                }
    logMsg $ T.pack $ "starting sale in " ++ show t

    tx <- payToScript                               -- (1)
        defaultSlotRange
        (tradeAddress t)
        v1
        tradeDataScript
    registerOnce (trigger1 t) (handler1 t)
    registerOnce (trigger2 t) (handler2 t tx)

  where
    trigger1 :: Trade -> EventTrigger               -- (2)
    trigger1 t =
        fundsAtAddressGeqT
            (tradeAddress t)
            (value1 t <> value2 t)
        `andT`
        slotRangeT
            (intervalTo $ deadline t)
    trigger2 t =                                    -- (3)
        fundsAtAddressGeqT
            (tradeAddress t)
            (value1 t)
        `andT`
        slotRangeT
            (intervalFrom $ deadline t)

    handler1 :: Trade -> EventHandler m             -- (4)
    handler1 t = EventHandler $ const $ do
        logMsg $ T.pack $ "executing " ++ show t
        m <- outputsAt $ tradeAddress t
        let ins  = Set.fromList
                [ scriptTxIn
                    r
                    (mkTradeValidator t)
                    (mkTradeRedeemerValue Execute)
                | r <- Map.keys m
                ]
            outs =
                [ pubKeyTxOut (value2 t) (party1 t)
                , pubKeyTxOut (value1 t) (party2 t)
                ]
        void $ createTxAndSubmit
            (intervalTo $ deadline t)
            ins
            outs

    handler2 :: Trade -> Tx -> EventHandler m       -- (5)
    handler2 t tx = EventHandler $ const $ do
        logMsg $ T.pack $ "reclaiming " ++ show t
        collectFromScriptTxn
            (intervalFrom $ deadline t)
            (mkTradeValidator t)
            (mkTradeRedeemerValue Reclaim)
            (hashTx tx)

buy :: forall m. MonadWallet m
    => PubKey  -- currency issuer
    -> String  -- currency name
    -> Integer -- currency quantity
    -> PubKey  -- seller
    -> Value   -- price
    -> Slot    -- deadline
    -> m ()
buy i c n p1 v2 dl = do
    let f  = Fungible
                { issuer = i
                , name   = TokenName $ C.pack c
                }
        v1 = fungibleValue f n
    p2 <- ownPubKey
    let t = Trade
                { value1   = v1
                , party1   = p1
                , value2   = v2
                , party2   = p2
                , deadline = dl
                }
    logMsg $ T.pack $ "starting buy in " ++ show t

    tx <- payToScript                              -- (1)
        defaultSlotRange
        (tradeAddress t)
        v2
        tradeDataScript
    registerOnce (trigger t) (handler t tx)

  where
    trigger t =                                    -- (2)
        fundsAtAddressGeqT
            (tradeAddress t)
            (value2 t)
        `andT`
        slotRangeT
            (intervalFrom $ deadline t)

    handler :: Trade -> Tx -> EventHandler m       -- (3)
    handler t tx = EventHandler $ const $ do
        logMsg $ T.pack $ "reclaiming " ++ show t
        collectFromScriptTxn
            (intervalFrom $ deadline t)
            (mkTradeValidator t)
            (mkTradeRedeemerValue Reclaim)
            (hashTx tx)

$(mkFunctions ['forge, 'sell, 'buy])

